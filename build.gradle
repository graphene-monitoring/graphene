buildscript {
    ext {
        kotlinVersion = "1.3.50"
        springBootVersion = "2.1.6.RELEASE"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion"
    }
}

plugins {
    id 'java'
    id "io.spring.dependency-management" version "1.0.5.RELEASE"
}

subprojects {
    apply plugin: "groovy"
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "kotlin"
    apply plugin: "kotlin-spring"
    apply plugin: "kotlin-jpa"
    apply plugin: "kotlin-kapt"
    apply plugin: "kotlin-allopen"
    apply plugin: 'jacoco'
    apply plugin: 'antlr'
    apply plugin: 'java'

    group = 'net.iponweb.disthene'
    version = '1.0.0'
    
    repositories {
        jcenter()
    }

    configurations {
        ktlint
    }

    dependencies {
        ktlint "com.pinterest:ktlint:0.35.0"
        // additional 3rd party ruleset(s) can be specified here
        // just add them to the classpath (e.g. ktlint 'groupId:artifactId:version') and 
        // ktlint will pick them up
    }

    task ktlint(type: JavaExec, group: "verification") {
        description = "Check Kotlin code style."
        classpath = configurations.ktlint
        main = "com.pinterest.ktlint.Main"
        args "src/**/*.kt"
        // to generate report in checkstyle format prepend following args:
        // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
        // see https://github.com/pinterest/ktlint#usage for more
    }
    check.dependsOn ktlint

    task ktlintFormat(type: JavaExec, group: "formatting") {
        description = "Fix Kotlin code style deviations."
        classpath = configurations.ktlint
        main = "com.pinterest.ktlint.Main"
        args "-F", "src/**/*.kt"
    }

    repositories {
        mavenCentral()
    }

    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"

    compileKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    tasks.test {
        useJUnitPlatform()
    }

    dependencies {
        compile 'log4j:log4j:1.2.17'
        compile 'io.netty:netty-all:4.0.24.Final'
        compile 'commons-cli:commons-cli:1.2'
        compile 'com.google.code.gson:gson:2.3.1'
        compile 'com.datastax.cassandra:cassandra-driver-core:3.1.0'
        compile 'com.google.guava:guava:18.0'
        compile 'joda-time:joda-time:2.8.2'
        compile 'org.elasticsearch.client:elasticsearch-rest-high-level-client:6.4.3'
        compile 'org.elasticsearch.client:elasticsearch-rest-client-sniffer:6.4.3'
        compile 'net.jpountz.lz4:lz4:1.2.0'
        compile 'commons-lang:commons-lang:2.6'
        compile 'com.rubiconproject.oss:jchronic:0.2.6'
        compile 'org.threeten:threeten-extra:1.5.0'
        compileOnly 'org.projectlombok:lombok:1.18.8'
        annotationProcessor 'org.projectlombok:lombok:1.18.8'

        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
        implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
        
        // Test
        testImplementation "org.jetbrains.kotlin:kotlin-test:${kotlinVersion}"
        testImplementation "org.jetbrains.kotlin:kotlin-test-junit:${kotlinVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-api"
        testImplementation "org.junit.jupiter:junit-jupiter-params"
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.mockk:mockk:1.8.8'
        testImplementation 'io.kotlintest:kotlintest-runner-junit5:3.3.2'

        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    }
}
